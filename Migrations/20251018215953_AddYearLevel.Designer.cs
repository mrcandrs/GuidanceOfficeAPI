// <auto-generated />
using System;
using GuidanceOfficeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuidanceOfficeAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018215953_AddYearLevel")]
    partial class AddYearLevel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ActivityLog", b =>
                {
                    b.Property<long>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ActorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("longtext");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Action", "CreatedAt");

                    b.HasIndex("ActorType", "ActorId", "CreatedAt");

                    b.HasIndex("EntityType", "EntityId", "CreatedAt");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.AppointmentReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AppointmentReasons");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.AvailableTimeSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentAppointmentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxAppointments")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SlotId");

                    b.ToTable("AvailableTimeSlots");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CareerPlanningForm", b =>
                {
                    b.Property<int>("CareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AimPromotion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AnotherCourse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CourseField")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CurrentWorkAbroad")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CurrentWorkNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmploymentNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EnrollmentReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FutureVision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LocalEmployment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainPlan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("MastersProgram")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NatureJob1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NatureJob2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramChoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProgramChoiceReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramExpectation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TopInterest1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopInterest2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopInterest3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("WorkAbroad")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CareerId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("CareerPlanningForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsentForm", b =>
                {
                    b.Property<int>("ConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CounselorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAgreed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ConsentId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConsentForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsultationForm", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Concerns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<string>("CounselorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GradeYearLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentGuardian")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolPersonnel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConsultationForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Counselor", b =>
                {
                    b.Property<int>("CounselorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("longblob");

                    b.HasKey("CounselorId");

                    b.ToTable("Counselors");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CounselorSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("InvalidatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvalidationReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CounselorId");

                    b.ToTable("CounselorSessions");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.DictionaryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Group", "Value")
                        .IsUnique();

                    b.ToTable("DictionaryItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Group = "gradeYears",
                            IsActive = true,
                            Value = "Grade 11"
                        },
                        new
                        {
                            Id = 2,
                            Group = "gradeYears",
                            IsActive = true,
                            Value = "Grade 12"
                        },
                        new
                        {
                            Id = 3,
                            Group = "gradeYears",
                            IsActive = true,
                            Value = "1st Year"
                        },
                        new
                        {
                            Id = 10,
                            Group = "genders",
                            IsActive = true,
                            Value = "Male"
                        },
                        new
                        {
                            Id = 11,
                            Group = "genders",
                            IsActive = true,
                            Value = "Female"
                        },
                        new
                        {
                            Id = 20,
                            Group = "academicLevels",
                            IsActive = true,
                            Value = "Junior High"
                        },
                        new
                        {
                            Id = 21,
                            Group = "academicLevels",
                            IsActive = true,
                            Value = "Senior High"
                        },
                        new
                        {
                            Id = 30,
                            Group = "referredBy",
                            IsActive = true,
                            Value = "Student"
                        },
                        new
                        {
                            Id = 31,
                            Group = "referredBy",
                            IsActive = true,
                            Value = "Parent"
                        },
                        new
                        {
                            Id = 40,
                            Group = "areasOfConcern",
                            IsActive = true,
                            Value = "Academic"
                        },
                        new
                        {
                            Id = 41,
                            Group = "areasOfConcern",
                            IsActive = true,
                            Value = "Behavioral"
                        },
                        new
                        {
                            Id = 50,
                            Group = "actionRequested",
                            IsActive = true,
                            Value = "Counseling"
                        },
                        new
                        {
                            Id = 51,
                            Group = "actionRequested",
                            IsActive = true,
                            Value = "Classroom Observation"
                        },
                        new
                        {
                            Id = 60,
                            Group = "referralPriorities",
                            IsActive = true,
                            Value = "Emergency"
                        },
                        new
                        {
                            Id = 61,
                            Group = "referralPriorities",
                            IsActive = true,
                            Value = "ASAP"
                        },
                        new
                        {
                            Id = 62,
                            Group = "referralPriorities",
                            IsActive = true,
                            Value = "Before Date"
                        },
                        new
                        {
                            Id = 70,
                            Group = "moodLevels",
                            IsActive = true,
                            Value = "MILD"
                        },
                        new
                        {
                            Id = 71,
                            Group = "moodLevels",
                            IsActive = true,
                            Value = "MODERATE"
                        },
                        new
                        {
                            Id = 72,
                            Group = "moodLevels",
                            IsActive = true,
                            Value = "HIGH"
                        });
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.EndorsementCustodyForm", b =>
                {
                    b.Property<int>("CustodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Concerns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndorsedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EndorsedTo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYearLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Interventions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Referrals")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CustodyId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("EndorsementCustodyForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ExitInterviewForm", b =>
                {
                    b.Property<int>("ExitFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("MainReason")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherActivitiesDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherReason")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherServicesDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("PlansAfterLeaving")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceResponsesJson")
                        .HasColumnType("longtext");

                    b.Property<string>("SkillsLearned")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificReasons")
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValuesLearned")
                        .HasColumnType("longtext");

                    b.HasKey("ExitFormId");

                    b.ToTable("ExitInterviewForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProgramSection")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AppointmentId");

                    b.ToTable("GuidanceAppointments");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<string>("CounselorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FollowThroughDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GradeYearLevelSection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Interventions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAcademic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBehavioral")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCareer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCounselorInitiated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFollowThroughSession")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFollowUp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReferral")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSocial")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWalkIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlanOfAction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PresentingProblem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferralAgencyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SeniorHighQuarter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TertiarySemester")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan?>("TimeEnded")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("TimeStarted")
                        .HasColumnType("time(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("NoteId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("GuidanceNotes");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidancePass", b =>
                {
                    b.Property<int>("PassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PassId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CounselorId");

                    b.ToTable("GuidancePasses");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("College")
                        .HasColumnType("longtext");

                    b.Property<string>("Elementary")
                        .HasColumnType("longtext");

                    b.Property<string>("Email1")
                        .HasColumnType("longtext");

                    b.Property<string>("Email2")
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyIllness")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherContact")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherIncome")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherName")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("GuardianContact")
                        .HasColumnType("longtext");

                    b.Property<string>("GuardianName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HadOperation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasIllness")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMedicalCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Hobbies")
                        .HasColumnType("longtext");

                    b.Property<string>("HospitalizedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("IllnessDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("JuniorHigh")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastDoctorVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LossExperience")
                        .HasColumnType("longtext");

                    b.Property<string>("MedicationDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherContact")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherIncome")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherName")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationReason")
                        .HasColumnType("longtext");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Problems")
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .HasColumnType("longtext");

                    b.Property<string>("ProvincialAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("RelationshipConcerns")
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolOrg")
                        .HasColumnType("longtext");

                    b.Property<string>("SeniorHigh")
                        .HasColumnType("longtext");

                    b.Property<string>("SocioCivic")
                        .HasColumnType("longtext");

                    b.Property<string>("Sports")
                        .HasColumnType("longtext");

                    b.Property<int?>("SpouseAge")
                        .HasColumnType("int");

                    b.Property<string>("SpouseContact")
                        .HasColumnType("longtext");

                    b.Property<string>("SpouseName")
                        .HasColumnType("longtext");

                    b.Property<string>("SpouseOccupation")
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("TakesMedication")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Talents")
                        .HasColumnType("longtext");

                    b.Property<string>("VisitReason")
                        .HasColumnType("longtext");

                    b.Property<bool?>("WasHospitalized")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InventoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("InventoryForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.JournalEntry", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Mood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("JournalId");

                    b.HasIndex("StudentId", "Date")
                        .IsUnique();

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.MobileConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MaxSiblings")
                        .HasColumnType("int");

                    b.Property<int>("MaxWorkExperience")
                        .HasColumnType("int");

                    b.Property<int>("MoodCooldownHours")
                        .HasColumnType("int");

                    b.Property<int>("NotificationCooldownMs")
                        .HasColumnType("int");

                    b.Property<string>("PasswordRegex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneRegex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentNumberRegex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MobileConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxSiblings = 5,
                            MaxWorkExperience = 5,
                            MoodCooldownHours = 24,
                            NotificationCooldownMs = 10000,
                            PasswordRegex = "^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{6,}$",
                            PhoneRegex = "^\\d{11}$",
                            StudentNumberRegex = "^\\d{11}$",
                            Version = 1
                        });
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.MoodThresholds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HighMin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MildMax")
                        .HasColumnType("int");

                    b.Property<int>("ModerateMax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MoodThresholds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HighMin = 7,
                            IsActive = true,
                            MildMax = 3,
                            ModerateMax = 6
                        });
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.MoodTracker", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MoodLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MoodId");

                    b.ToTable("MoodTrackers");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ProgramEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ReferralCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DefaultPriority")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReferralCategories");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ReferralForm", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcademicLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionRequested")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionRequestedOtherDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionsTakenBefore")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AreasOfConcern")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AreasOfConcernOtherDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorActionsTaken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CounselorFeedbackDateReferred")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CounselorFeedbackStudentName")
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorInitialAction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CounselorSessionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateReferred")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonWhoReferred")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PriorityDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferralReasons")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReferralId");

                    b.HasIndex("StudentId");

                    b.ToTable("ReferralForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.SectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramCode", "Name")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Sibling", b =>
                {
                    b.Property<int>("SiblingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<int>("InventoryFormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramOrOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolOrCompany")
                        .HasColumnType("longtext");

                    b.HasKey("SiblingId");

                    b.HasIndex("InventoryFormId");

                    b.ToTable("Siblings");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("longblob");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StudentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.TimeSlotDefaults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DefaultTimesCsv")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxAppointments")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeSlotDefaults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultTimesCsv = "9:00 AM, 10:00 AM, 1:00 PM",
                            IsActive = true,
                            MaxAppointments = 3
                        });
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext");

                    b.Property<int>("InventoryFormId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("WorkId");

                    b.HasIndex("InventoryFormId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.YearLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("YearLevels");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CareerPlanningForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsentForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId");

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsultationForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CounselorSession", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany("Sessions")
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.EndorsementCustodyForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceNote", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidancePass", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.GuidanceAppointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Counselor");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ReferralForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Sibling", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.InventoryForm", "InventoryForm")
                        .WithMany("Siblings")
                        .HasForeignKey("InventoryFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryForm");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.WorkExperience", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.InventoryForm", "InventoryForm")
                        .WithMany("WorkExperience")
                        .HasForeignKey("InventoryFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryForm");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Counselor", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.Navigation("Siblings");

                    b.Navigation("WorkExperience");
                });
#pragma warning restore 612, 618
        }
    }
}
