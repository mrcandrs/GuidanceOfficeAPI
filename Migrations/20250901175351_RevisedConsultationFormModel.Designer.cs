// <auto-generated />
using System;
using GuidanceOfficeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuidanceOfficeAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901175351_RevisedConsultationFormModel")]
    partial class RevisedConsultationFormModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CareerPlanningForm", b =>
                {
                    b.Property<int>("CareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AimPromotion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AnotherCourse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CourseField")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CurrentWorkAbroad")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CurrentWorkNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmploymentNature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EnrollmentReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FutureVision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LocalEmployment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainPlan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("MastersProgram")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NatureJob1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NatureJob2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalChoice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramChoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProgramChoiceReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramExpectation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TopInterest1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopInterest2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopInterest3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopSkill3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopStrength3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopValue3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("WorkAbroad")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CareerId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("CareerPlanningForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsentForm", b =>
                {
                    b.Property<int>("ConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CounselorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAgreed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ConsentId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConsentForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsultationForm", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Concerns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<string>("CounselorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GradeYearLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentGuardian")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolPersonnel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConsultationForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Counselor", b =>
                {
                    b.Property<int>("CounselorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CounselorId");

                    b.ToTable("Counselors");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.EndorsementCustodyForm", b =>
                {
                    b.Property<int>("CustodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Concerns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndorsedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EndorsedTo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYearLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Interventions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Referrals")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CustodyId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("EndorsementCustodyForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ExitInterviewForm", b =>
                {
                    b.Property<int>("ExitFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("MainReason")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherActivitiesDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherReason")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherServicesDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("PlansAfterLeaving")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceResponsesJson")
                        .HasColumnType("longtext");

                    b.Property<string>("SkillsLearned")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificReasons")
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValuesLearned")
                        .HasColumnType("longtext");

                    b.HasKey("ExitFormId");

                    b.ToTable("ExitInterviewForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramSection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AppointmentId");

                    b.ToTable("GuidanceAppointments");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("StudentId");

                    b.ToTable("GuidanceNotes");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidancePass", b =>
                {
                    b.Property<int>("PassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PassId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CounselorId");

                    b.ToTable("GuidancePasses");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("College")
                        .HasColumnType("longtext");

                    b.Property<string>("Elementary")
                        .HasColumnType("longtext");

                    b.Property<string>("Email1")
                        .HasColumnType("longtext");

                    b.Property<string>("Email2")
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyIllness")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherContact")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherIncome")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherName")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("GuardianContact")
                        .HasColumnType("longtext");

                    b.Property<string>("GuardianName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HadOperation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasIllness")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMedicalCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Hobbies")
                        .HasColumnType("longtext");

                    b.Property<string>("HospitalizedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("IllnessDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("JuniorHigh")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastDoctorVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LossExperience")
                        .HasColumnType("longtext");

                    b.Property<string>("MedicationDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherContact")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherIncome")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherName")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationReason")
                        .HasColumnType("longtext");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Problems")
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .HasColumnType("longtext");

                    b.Property<string>("ProvincialAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("RelationshipConcerns")
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolOrg")
                        .HasColumnType("longtext");

                    b.Property<string>("SeniorHigh")
                        .HasColumnType("longtext");

                    b.Property<string>("SocioCivic")
                        .HasColumnType("longtext");

                    b.Property<string>("Sports")
                        .HasColumnType("longtext");

                    b.Property<int?>("SpouseAge")
                        .HasColumnType("int");

                    b.Property<string>("SpouseContact")
                        .HasColumnType("longtext");

                    b.Property<string>("SpouseName")
                        .HasColumnType("longtext");

                    b.Property<string>("SpouseOccupation")
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("TakesMedication")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Talents")
                        .HasColumnType("longtext");

                    b.Property<string>("VisitReason")
                        .HasColumnType("longtext");

                    b.Property<bool?>("WasHospitalized")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InventoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("InventoryForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.JournalEntry", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Mood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("JournalId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.MoodTracker", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MoodLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MoodId");

                    b.ToTable("MoodTrackers");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ReferralForm", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcademicLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionRequested")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionRequestedOtherDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionsTakenBefore")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AreasOfConcern")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AreasOfConcernOtherDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorActionsTaken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CounselorFeedbackDateReferred")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CounselorFeedbackStudentName")
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorInitialAction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CounselorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CounselorSessionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateReferred")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonWhoReferred")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PriorityDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferralReasons")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReferralId");

                    b.HasIndex("StudentId");

                    b.ToTable("ReferralForms");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Sibling", b =>
                {
                    b.Property<int>("SiblingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<int>("InventoryFormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ProgramOrOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolOrCompany")
                        .HasColumnType("longtext");

                    b.HasKey("SiblingId");

                    b.HasIndex("InventoryFormId");

                    b.ToTable("Siblings");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GradeYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("longblob");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StudentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext");

                    b.Property<int>("InventoryFormId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("WorkId");

                    b.HasIndex("InventoryFormId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.CareerPlanningForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsentForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId");

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ConsultationForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.EndorsementCustodyForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidanceNote", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.GuidancePass", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.GuidanceAppointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuidanceOfficeAPI.Models.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Counselor");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.ReferralForm", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.Sibling", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.InventoryForm", "InventoryForm")
                        .WithMany("Siblings")
                        .HasForeignKey("InventoryFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryForm");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.WorkExperience", b =>
                {
                    b.HasOne("GuidanceOfficeAPI.Models.InventoryForm", "InventoryForm")
                        .WithMany("WorkExperience")
                        .HasForeignKey("InventoryFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryForm");
                });

            modelBuilder.Entity("GuidanceOfficeAPI.Models.InventoryForm", b =>
                {
                    b.Navigation("Siblings");

                    b.Navigation("WorkExperience");
                });
#pragma warning restore 612, 618
        }
    }
}
